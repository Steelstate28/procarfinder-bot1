from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from config import TOKEN, ADMIN_ID

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    language = State()
    description = State()
    budget = State()
    title_type = State()
    accident = State()
    location = State()
    contact = State()
    package = State()
    extra = State()
    photo = State()
    document = State()

languages = {
    'ua': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'en': 'üá¨üáß English'
}

texts = {
    'ua': {
        'start': "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥–∏ ‚Äú–ó–ê–õ–Ü–ó–ù–ò–ô –®–¢–ê–¢‚Äù. –í–∏–±–µ—Ä–∏ –º–æ–≤—É:",
        'ask_description': "–û–ø–∏—à–∏, —è–∫—É –º–∞—à–∏–Ω—É —à—É–∫–∞—î—à:",
        'ask_budget': "–Ø–∫–∏–π —É —Ç–µ–±–µ –±—é–¥–∂–µ—Ç?",
        'ask_title': "–Ø–∫–∏–π —Ç–∏–ø —Ç–∞–π—Ç–ª—É —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        'ask_accident': "–†–æ–∑–≥–ª—è–¥–∞—î—à –∞–≤—Ç–æ –ø—ñ—Å–ª—è –î–¢–ü?",
        'ask_location': "–ù–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:",
        'ask_contact': "–ó–∞–ª–∏—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É (–Ω–æ–º–µ—Ä –∞–±–æ @–Ω—ñ–∫):",
        'ask_package': "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç:",
        'ask_extra': "–•–æ—á–µ—à —â–æ—Å—å –¥–æ–¥–∞—Ç–∏ –¥–æ –∑–∞—è–≤–∫–∏?",
        'ask_photo': "–ù–∞–¥—ñ—à–ª–∏ –¥–æ 5 —Ñ–æ—Ç–æ –∞–≤—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
        'ask_document': "–ü—Ä–∏–∫—Ä—ñ–ø–∏ —Ñ–∞–π–ª (Carfax, —ñ–Ω–≤–æ–π—Å —Ç–æ—â–æ) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
        'thanks': "–î—è–∫—É—é! –ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–∏ –∑ —Ç–æ–±–æ—é –∑–≤‚Äô—è–∂–µ–º–æ—Å—å."
    }
    # –î–æ–¥–∞—Ç–∏ 'ru' —Ç–∞ 'en' –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
}

@dp.message_handler(commands='start')
async def start_handler(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data='start_form'))
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥–∏ ‚Äú–ó–ê–õ–Ü–ó–ù–ò–ô –®–¢–ê–¢‚Äù. –©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'start_form')
async def start_form(callback_query: types.CallbackQuery, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for code, label in languages.items():
        kb.add(KeyboardButton(label))
    await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä–∏ –º–æ–≤—É:", reply_markup=kb)
    await Form.language.set()

@dp.message_handler(state=Form.language)
async def set_language(message: types.Message, state: FSMContext):
    selected = [k for k, v in languages.items() if v == message.text]
    if not selected:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –º–æ–≤—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    lang = selected[0]
    await state.update_data(lang=lang)
    await Form.description.set()
    await message.answer(texts[lang]['ask_description'], reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=Form.description)
async def ask_budget(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    lang = (await state.get_data())['lang']
    await Form.budget.set()
    await message.answer(texts[lang]['ask_budget'])

@dp.message_handler(state=Form.budget)
async def ask_title(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    lang = (await state.get_data())['lang']
    await Form.title_type.set()
    await message.answer(texts[lang]['ask_title'])

@dp.message_handler(state=Form.title_type)
async def ask_accident(message: types.Message, state: FSMContext):
    await state.update_data(title_type=message.text)
    lang = (await state.get_data())['lang']
    await Form.accident.set()
    await message.answer(texts[lang]['ask_accident'])

@dp.message_handler(state=Form.accident)
async def ask_location(message: types.Message, state: FSMContext):
    await state.update_data(accident=message.text)
    lang = (await state.get_data())['lang']
    await Form.location.set()
    geo_button = KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
    skip_btn = KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(geo_button).add(skip_btn)
    await message.answer(texts[lang]['ask_location'], reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.LOCATION, state=Form.location)
async def location_received(message: types.Message, state: FSMContext):
    loc = f"{message.location.latitude}, {message.location.longitude}"
    await state.update_data(location=loc)
    lang = (await state.get_data())['lang']
    await Form.contact.set()
    await message.answer(texts[lang]['ask_contact'], reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=Form.location)
async def ask_contact(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    lang = (await state.get_data())['lang']
    await Form.contact.set()
    await message.answer(texts[lang]['ask_contact'], reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=Form.contact)
async def ask_package(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    lang = (await state.get_data())['lang']
    await Form.package.set()
    await message.answer(texts[lang]['ask_package'])

@dp.message_handler(state=Form.package)
async def ask_extra(message: types.Message, state: FSMContext):
    await state.update_data(package=message.text)
    lang = (await state.get_data())['lang']
    skip_btn = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    await Form.extra.set()
    await message.answer(texts[lang]['ask_extra'], reply_markup=skip_btn)

@dp.message_handler(state=Form.extra)
async def ask_photo(message: types.Message, state: FSMContext):
    await state.update_data(extra=message.text)
    lang = (await state.get_data())['lang']
    skip_btn = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    await Form.photo.set()
    await message.answer(texts[lang]['ask_photo'], reply_markup=skip_btn)

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def save_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)

@dp.message_handler(state=Form.photo)
async def ask_document(message: types.Message, state: FSMContext):
    lang = (await state.get_data())['lang']
    await Form.document.set()
    await message.answer(texts[lang]['ask_document'])

@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=Form.document)
async def save_document(message: types.Message, state: FSMContext):
    await state.update_data(document=message.document.file_id)
    await finish(message, state)

@dp.message_handler(state=Form.document)
async def skip_document(message: types.Message, state: FSMContext):
    await finish(message, state)

async def finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.full_name} (@{message.from_user.username}):\n\n" \
           f"üöó –ú–∞—à–∏–Ω–∞: {data['description']}\n" \
           f"üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}\n" \
           f"üìÑ –¢–∞–π—Ç–ª: {data['title_type']}\n" \
           f"üí• –î–¢–ü: {data['accident']}\n" \
           f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {data['location']}\n" \
           f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n" \
           f"üõ†Ô∏è –ü–∞–∫–µ—Ç: {data['package']}\n" \
           f"‚úçÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–æ: {data['extra']}\n"

    await bot.send_message(chat_id=ADMIN_ID, text=text)

    if 'photos' in data:
        for pid in data['photos'][:5]:
            await bot.send_photo(chat_id=ADMIN_ID, photo=pid)

    if 'document' in data:
        await bot.send_document(chat_id=ADMIN_ID, document=data['document'])

    lang = data['lang']
    await message.answer(texts[lang]['thanks'], reply_markup=ReplyKeyboardRemove())
    await state.finish()

if __name__ == '__main__':
    print("Bot is running...")
    executor.start_polling(dp, skip_updates=True)
