from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from config import TOKEN, ADMIN_ID

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    language = State()
    description = State()
    budget = State()
    title_type = State()
    accident = State()
    delivery = State()
    contact = State()
    package = State()
    extra = State()

languages = {
    'ua': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'en': 'üá¨üáß English'
}

texts = {
    'ua': {
        'start': "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥–∏ ‚Äú–ó–ê–õ–Ü–ó–ù–ò–ô –®–¢–ê–¢‚Äù. –í–∏–±–µ—Ä–∏ –º–æ–≤—É:",
        'ask_description': "–û–ø–∏—à–∏, —è–∫—É –º–∞—à–∏–Ω—É —à—É–∫–∞—î—à (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, —Ä—ñ–∫, –ø—Ä–æ–±—ñ–≥, –∫–æ–ª—ñ—Ä —Ç–æ—â–æ):",
        'ask_budget': "–Ø–∫–∏–π —É —Ç–µ–±–µ –±—é–¥–∂–µ—Ç?",
        'ask_title': "–Ø–∫–∏–π —Ç–∏–ø —Ç–∞–π—Ç–ª—É —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        'ask_accident': "–†–æ–∑–≥–ª—è–¥–∞—î—à –∞–≤—Ç–æ –ø—ñ—Å–ª—è –î–¢–ü? (–¢–∞–∫ / –ù—ñ)",
        'ask_delivery': "–ö—É–¥–∏ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ (—à—Ç–∞—Ç –∞–±–æ –º—ñ—Å—Ç–æ)?",
        'ask_contact': "–ó–∞–ª–∏—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É (–Ω–æ–º–µ—Ä –∞–±–æ @–Ω—ñ–∫):",
        'ask_package': "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç:\n\n1. üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é ‚Äì $500\n2. ‚úÖ –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ ‚Äú–ø—ñ–¥ –∫–ª—é—á‚Äù ‚Äì $750\n\n*–Ø–∫—â–æ –∞–≤—Ç–æ –Ω–µ –ø—ñ–¥—ñ–π–¥–µ, –º–æ–∂–Ω–∞ –¥–æ–ø–ª–∞—Ç–∏—Ç–∏ $250 –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –ø–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç*",
        'ask_extra': "–•–æ—á–µ—à —â–æ—Å—å –¥–æ–¥–∞—Ç–∏ –¥–æ –∑–∞—è–≤–∫–∏? –ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
        'thanks': "–î—è–∫—É—é! –ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–∏ —Å–∫–æ—Ä–æ –∑ —Ç–æ–±–æ—é –∑–≤‚Äô—è–∂–µ–º–æ—Å—å."
    },
    'ru': {
        'start': "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã ‚Äú–ó–ê–õ–Ü–ó–ù–ò–ô –®–¢–ê–¢‚Äù. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        'ask_description': "–û–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É —Ç—ã –∏—â–µ—à—å (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, –ø—Ä–æ–±–µ–≥, —Ü–≤–µ—Ç –∏ —Ç.–¥.):",
        'ask_budget': "–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç?",
        'ask_title': "–ö–∞–∫–æ–π —Ç–∏–ø —Ç–∞–π—Ç–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        'ask_accident': "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –∞–≤—Ç–æ –ø–æ—Å–ª–µ –î–¢–ü? (–î–∞ / –ù–µ—Ç)",
        'ask_delivery': "–ö—É–¥–∞ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (—à—Ç–∞—Ç –∏–ª–∏ –≥–æ—Ä–æ–¥)?",
        'ask_contact': "–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä –∏–ª–∏ @–Ω–∏–∫):",
        'ask_package': "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:\n\n1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π ‚Äì $500\n2. ‚úÖ –ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ ‚Äú–ø–æ–¥ –∫–ª—é—á‚Äù ‚Äì $750\n\n*–ï—Å–ª–∏ –∞–≤—Ç–æ –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç ‚Äî –º–æ–∂–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å $250 –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç*",
        'ask_extra': "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ? –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        'thanks': "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è."
    },
    'en': {
        'start': "Hi! I'm the ‚ÄúZALIZNYI SHTAT‚Äù bot. Choose your language:",
        'ask_description': "Describe what kind of car you're looking for (make, model, year, mileage, color, etc.):",
        'ask_budget': "What's your budget?",
        'ask_title': "Which title type are you interested in?",
        'ask_accident': "Are you open to cars with accident history? (Yes / No)",
        'ask_delivery': "Where should the car be delivered (state or city)?",
        'ask_contact': "Leave your contact (phone or @username):",
        'ask_package': "Choose a service package:\n\n1. üîç Vehicle check before purchase ‚Äì $500\n2. ‚úÖ Full auto search ‚Äì $750\n\n*If the vehicle isn‚Äôt suitable ‚Äî you can pay extra $250 and upgrade to full package*",
        'ask_extra': "Want to add anything else to your request? Type your message or press 'Skip':",
        'thanks': "Thank you! Your request was sent. We‚Äôll contact you soon."
    }
}

@dp.message_handler(commands='start')
async def start_handler(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for code, label in languages.items():
        kb.add(KeyboardButton(label))
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥–∏ ‚Äú–ó–ê–õ–Ü–ó–ù–ò–ô –®–¢–ê–¢‚Äù. –í–∏–±–µ—Ä–∏ –º–æ–≤—É:", reply_markup=kb)
    await Form.language.set()

@dp.message_handler(state=Form.language)
async def set_language(message: types.Message, state: FSMContext):
    selected = [k for k, v in languages.items() if v == message.text]
    if not selected:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –º–æ–≤—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    lang = selected[0]
    await state.update_data(lang=lang)
    await Form.description.set()
    await message.answer(texts[lang]['ask_description'], reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.description)
async def ask_budget(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    lang = (await state.get_data())['lang']
    await Form.budget.set()
    await message.answer(texts[lang]['ask_budget'])

@dp.message_handler(state=Form.budget)
async def ask_title(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    lang = (await state.get_data())['lang']
    await Form.title_type.set()
    await message.answer(texts[lang]['ask_title'])

@dp.message_handler(state=Form.title_type)
async def ask_accident(message: types.Message, state: FSMContext):
    await state.update_data(title_type=message.text)
    lang = (await state.get_data())['lang']
    await Form.accident.set()
    await message.answer(texts[lang]['ask_accident'])

@dp.message_handler(state=Form.accident)
async def ask_delivery(message: types.Message, state: FSMContext):
    await state.update_data(accident=message.text)
    lang = (await state.get_data())['lang']
    await Form.delivery.set()
    await message.answer(texts[lang]['ask_delivery'])

@dp.message_handler(state=Form.delivery)
async def ask_contact(message: types.Message, state: FSMContext):
    await state.update_data(delivery=message.text)
    lang = (await state.get_data())['lang']
    await Form.contact.set()
    await message.answer(texts[lang]['ask_contact'])

@dp.message_handler(state=Form.contact)
async def ask_package(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    lang = (await state.get_data())['lang']
    await Form.package.set()
    await message.answer(texts[lang]['ask_package'])

@dp.message_handler(state=Form.package)
async def ask_extra(message: types.Message, state: FSMContext):
    await state.update_data(package=message.text)
    lang = (await state.get_data())['lang']
    skip_btn = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏") if lang == 'ua' else ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" if lang == 'ru' else "Skip"))
    await Form.extra.set()
    await message.answer(texts[lang]['ask_extra'], reply_markup=skip_btn)

@dp.message_handler(state=Form.extra)
async def finish(message: types.Message, state: FSMContext):
    await state.update_data(extra=message.text)
    data = await state.get_data()
    text = f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.full_name} (@{message.from_user.username}):\n\n" \
           f"üöó –ú–∞—à–∏–Ω–∞: {data['description']}\n" \
           f"üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}\n" \
           f"üìÑ –¢–∞–π—Ç–ª: {data['title_type']}\n" \
           f"üí• –î–¢–ü: {data['accident']}\n" \
           f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n" \
           f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n" \
           f"üõ†Ô∏è –ü–∞–∫–µ—Ç: {data['package']}\n" \
           f"‚úçÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–æ: {data['extra']}\n"

    await bot.send_message(chat_id=ADMIN_ID, text=text)
    await message.answer(texts[data['lang']]['thanks'], reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

if __name__ == '__main__':
    print("Bot is running...")
    executor.start_polling(dp, skip_updates=True)

